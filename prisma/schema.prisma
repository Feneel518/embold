// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  heading   String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  image      String?
  isActive   Boolean  @default(false)
  showOnHome Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  parentId    String?    @db.ObjectId
  parent      Category?  @relation("ParentCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategory Category[] @relation("ParentCategory")

  categoriesOnProducts CategoriesOnProducts[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description Json?
  slug        String
  isActive    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  size        String[]
  colour      Json[]

  categoriesOnProducts CategoriesOnProducts[]

  Inventory Inventory[]

  Image Image[]
}

model CategoriesOnProducts {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model Inventory {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  isActive        Boolean  @default(false)
  price           Float
  discountedPrice Float?
  Sku             String   @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  AttributesOnInventory AttributesOnInventory[]
}

model Attribute {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  AttributeValue AttributeValue[]
}

model AttributeValue {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  value String  @unique
  name  String?

  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String    @db.ObjectId

  AttributesOnInventory AttributesOnInventory[]
}

model AttributesOnInventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [value])
  attributeValueId String

  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @db.ObjectId
}

model Image {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  altText    String
  isFeatured Boolean

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model StockControl {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  units Int    @default(0)
}
